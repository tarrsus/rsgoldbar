{"version":3,"sources":["webpack:///src/app/modules/admin/admin.module.ts","webpack:///src/app/modules/admin/admin-user/admin-user.component.ts","webpack:///src/app/modules/admin/admin-user/admin-user.component.html","webpack:///src/app/modules/admin/admin-referrals/admin-referrals.component.ts","webpack:///src/app/modules/admin/admin-referrals/admin-referrals.component.html","webpack:///src/app/modules/admin/admin-routing.module.ts","webpack:///src/app/modules/admin/admin-orders/admin-orders.component.ts","webpack:///src/app/modules/admin/admin-orders/admin-orders.component.html","webpack:///src/app/modules/admin/users/users.component.ts","webpack:///src/app/modules/admin/users/users.component.html","webpack:///src/app/modules/admin/admin-main/admin-main.component.ts","webpack:///src/app/modules/admin/admin-main/admin-main.component.html","webpack:///src/app/modules/admin/stock/stock.component.ts","webpack:///src/app/modules/admin/stock/stock.component.html","webpack:///src/app/modules/admin/admin-referral-orders/admin-referral-orders.component.ts","webpack:///src/app/modules/admin/admin-referral-orders/admin-referral-orders.component.html"],"names":["AdminModule","declarations","imports","AdminUserComponent","route","userService","id","snapshot","params","user","userForm","groupId","required","pgsArray","paymentGatewaysForm","pgs","userIpsDisplayedColumns","userIps","userIpPage","userRsnsDisplayedColumns","userRsns","userRsnPage","_getUser","fetchPaymentGateways","getUserIpsPage","getUserRsnsPage","data","updateUserGroup","subscribe","response","getUser","controls","patchValue","length","removeAt","getUserPaymentGateways","getUserLimits","responses","forEach","element","found","find","x","paymentGateway","_id","left","formGroup","limit","value","disabled","name","paymentGatewayId","push","updateUserPaymentGateways","getRawValue","result","page","isNaN","loading","getUserIps","totalIps","totalCount","map","blacklisted","getUserRsns","totalRsns","$event","action","userIpAddressId","updateUserIp","save","updatePgs","onActionIps","selector","templateUrl","styleUrls","AdminReferralsComponent","router","referralService","referralCodeForm","code","displayedColumns","selected","getReferrals","total","referrals","updateReferral","addReferral","get","navigate","updateRefCode","onAction","routes","path","component","children","pathMatch","redirectTo","AdminRoutingModule","forChild","exports","AdminOrdersComponent","order","getCurrencySymbol","isEmptyOrNull","columnsToDisplay","dataSource","ordersForm","filterBy","filter","p","getPage","getRates","rates","orderId","updateOrder","_","deleteOrder","filterValue","trim","toLowerCase","getOrders","filterCriteria","orders","console","log","curr","newRate","setRate","search","height","minHeight","animations","UsersComponent","usersForm","getAllUsers","pipe","componentDestroyed$","users","userId","watcher","AdminMainComponent","changeDetectorRef","media","basePageService","isLoggedIn","isAdmin","isWorker","isMobile","navLinks","mobileQuery","matchMedia","_mobileQueryListener","detectChanges","addListener","updateTitleDescription","removeListener","undefined","jwt","text","link","StockComponent","stock","paymentgatewayService","matcher","stockForm","rs3PriceSelling","rs3PriceBuying","rs3Units","osrsPriceSelling","osrsPriceBuying","osrsUnits","fetchDataStock","getStock","stocks","setValue","rs3","selling","buying","units","osrs","getPaymentGateways","fees","updateStock","updatePaymentGateways","updateStocks","AdminReferralOrdersComponent","statistics","getStatistics"],"mappings":"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","file":"admin-admin-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminMainComponent } from './admin-main/admin-main.component';\nimport { StockComponent } from './stock/stock.component';\nimport { UsersComponent } from './users/users.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { AdminOrdersComponent } from './admin-orders/admin-orders.component';\nimport { AdminUserComponent } from './admin-user/admin-user.component';\nimport { AdminReferralsComponent } from './admin-referrals/admin-referrals.component';\nimport { AdminReferralOrdersComponent } from './admin-referral-orders/admin-referral-orders.component';\n\n@NgModule({\n  declarations: [AdminMainComponent, StockComponent, UsersComponent, AdminOrdersComponent, AdminUserComponent, AdminReferralsComponent, AdminReferralOrdersComponent],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    SharedModule\n  ]\n})\nexport class AdminModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserService } from 'src/app/shared/user.service';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { getUser, isEmptyOrNull } from 'src/app/shared/utils';\nimport { forkJoin } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-user',\n  templateUrl: './admin-user.component.html',\n  styleUrls: ['./admin-user.component.sass']\n})\nexport class AdminUserComponent implements OnInit {\n  id = this.route.snapshot.params.id;\n  user = null;\n  userForm = new FormGroup({\n    groupId: new FormControl(1, [Validators.required])\n  })\n\n  pgsArray = new FormArray([]);\n  paymentGatewaysForm = new FormGroup({\n    pgs: this.pgsArray\n  })\n  constructor(private route: ActivatedRoute, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this._getUser();\n    this.fetchPaymentGateways();\n    this.getUserIpsPage(1);\n    this.getUserRsnsPage(1);\n   }\n\n  public save(data: any) {\n    this.userService.updateUserGroup(this.id, data).subscribe(response => {\n      this._getUser();\n    })\n  }\n\n  public _getUser() {\n    this.userService.getUser(this.id).subscribe(response => {\n      this.user = response;\n      this.userForm.controls.groupId.patchValue(response.groupId); \n    });\n  }\n\n  public fetchPaymentGateways() {\n    while (this.pgsArray.length > 0) {\n      this.pgsArray.removeAt(0);\n    }\n    forkJoin([\n      this.userService.getUserPaymentGateways(this.id),\n      this.userService.getUserLimits(this.id)\n    ]).subscribe(responses => {\n      responses[0].forEach(element => {\n        const found = responses[1].find(x => `${x.paymentGateway._id}` === `${element.paymentGateway._id}`);\n        const left = found ? found.left : 0;\n        const formGroup = new FormGroup({\n          limit: new FormControl(element.limit),\n          left: new FormControl({ value: left, disabled: true }),\n          name: new FormControl({ value: element.paymentGateway.name, disabled: true }),\n          paymentGatewayId: new FormControl({ value: element.paymentGateway._id, disabled: true })\n        })\n        this.pgsArray.push(formGroup)\n      });\n    });\n  }\n\n  public getPgs(): any {\n    return this.paymentGatewaysForm.controls['pgs'] as any;\n  }\n\n  public updatePgs() {\n    this.userService.updateUserPaymentGateways(this.id, this.paymentGatewaysForm.getRawValue()).subscribe(result => {\n      this.fetchPaymentGateways();\n    });\n  }\n\n\n\n  userIpsDisplayedColumns: string[] = ['ipAddress', 'blacklisted', 'dateCreated', 'edit'];\n  userIps = [];\n  userIpPage: number = 1;\n  totalIps: number;\n  loading: boolean;\n\n  userRsnsDisplayedColumns: string[] = ['rsn', 'dateCreated'];\n  userRsns = [];\n  userRsnPage: number = 1;\n  totalRsns: number; \n  getUserIpsPage(page: number) {\n    if (!isNaN(page)) {\n      this.loading = true;\n      this.userService.getUserIps(this.id, page).subscribe(response => {\n        this.totalIps = response.totalCount;\n        this.userIpPage = page;\n        this.loading = false;\n        this.userIps = response.userIps;\n        this.userIps = this.userIps.map(x => {\n          x.blacklisted = x.blacklisted ? 'Yes' : 'No';\n          return x\n        })\n      });\n    }\n  }\n\n  getUserRsnsPage(page: number) {\n    if (!isNaN(page)) {\n      this.loading = true;\n      this.userService.getUserRsns(this.id, page).subscribe(response => {\n        this.totalRsns = response.totalCount;\n        this.userRsnPage = page;\n        this.loading = false;\n        this.userRsns = response.userRsns;\n      });\n    }\n  }\n \n  public onActionIps($event) {\n    if ($event !== null && $event.element !== null) {\n      const { action } = $event;\n      switch (action) {\n        case 'edit':\n          const userIpAddressId = $event.element._id;\n          this.userService.updateUserIp(this.id, userIpAddressId).subscribe(response => {\n            this.getUserIpsPage(this.userIpPage);\n          })\n          break;\n      }\n    }\n  } \n}\n","<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h3>User Details</h3>\n        </div>\n    </div>\n    <ng-container *ngIf=\"user\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div class=\"header\">\n                    Email: {{user.email}}\n                </div>\n            </div>\n        </div>\n        <hr>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div>Group name: {{user.groupName}}</div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div>Last updated: {{user.lastUpdated | date:'short'}}</div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div>Date Created: {{user.dateCreated | date:'short'}}</div>\n            </div>\n        </div>\n        <hr>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div>Update Group</div>\n            </div>\n        </div>\n    </ng-container>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"save(userForm.value)\" class=\"input-black\">\n\n                <mat-form-field class=\"form-field\" appearance=\"outline\">\n                    <mat-label>Group</mat-label>\n                    <mat-select formControlName=\"groupId\">\n                        <mat-option [value]=\"2\">Worker</mat-option>\n                        <mat-option [value]=\"4\">Customer</mat-option>\n                        <mat-option [value]=\"-1\">Banned</mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n\n                <div class=\"col-12 text-left\">\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!userForm.valid\">Save</button>\n                </div>\n            </form>\n        </div>\n    </div>\n    <hr>\n    <form [formGroup]=\"paymentGatewaysForm\">\n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <h3>User Limits</h3>\n            </div>\n        </div>\n        <ng-container formArrayName=\"pgs\">\n            <ng-container *ngFor=\"let f of getPgs().controls; index as i\">\n                <ng-container [formGroupName]=\"i\">\n\n                    <div class=\"row\">\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Payment Gateway Name</mat-label>\n                                <input matInput placeholder=\"Payment Gateway Name\" formControlName=\"name\">\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Payment Gateway Id</mat-label>\n                                <input matInput placeholder=\"Payment Gateway Id\" formControlName=\"paymentGatewayId\">\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Left</mat-label>\n                                <input matInput placeholder=\"Left\" formControlName=\"left\" type=\"number\">\n                                <mat-hint>left <strong>required</strong></mat-hint>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Limit</mat-label>\n                                <input matInput placeholder=\"Limit\" formControlName=\"limit\" type=\"number\">\n                                <mat-hint>Limit <strong>required</strong></mat-hint>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </ng-container>\n                <hr>\n            </ng-container>\n            <div class=\"row\">\n                <div class=\"col-12 text-left\">\n                    <button mat-raised-button type=\"button\" (click)=\"updatePgs()\">\n                        Update Payment Gateways\n                    </button>\n                </div>\n            </div>\n        </ng-container>\n    </form>\n    <hr>\n    <div class=\"row mt-4\">\n        <div class=\"col-12\">\n            <h3>User IP Logs</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"paginator\">\n                <div class=\"spinner\" [ngClass]=\"{ 'hidden': !loading }\"></div>\n                <pagination-controls (pageChange)=\"getUserIpsPage($event)\" id=\"server\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <app-generic-table [displayedColumns]=\"userIpsDisplayedColumns\" [data]=\"userIps\" (action)=\"onActionIps($event)\">\n    </app-generic-table>\n\n    <hr>\n    <div class=\"row mt-4\">\n        <div class=\"col-12\">\n            <h3>User RSNs</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"paginator\">\n                <div class=\"spinner\" [ngClass]=\"{ 'hidden': !loading }\"></div>\n                <pagination-controls (pageChange)=\"getUserRsnsPage($event)\" id=\"server\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <app-generic-table [displayedColumns]=\"userRsnsDisplayedColumns\" [data]=\"userRsns\">\n    </app-generic-table>\n\n\n    <li *ngFor=\"let _ of userIps | paginate: { id: 'server', itemsPerPage: 10, currentPage: userIpPage, totalItems: totalIps }\"\n        style=\"display: none;\">\n    </li>\n\n    <li *ngFor=\"let _ of userRsns | paginate: { id: 'server', itemsPerPage: 10, currentPage: userRsnPage, totalItems: totalRsns }\"\n        style=\"display: none;\">\n    </li>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ReferralService } from 'src/app/shared/referral.service';\n\n@Component({\n  selector: 'app-admin-referrals',\n  templateUrl: './admin-referrals.component.html',\n  styleUrls: ['./admin-referrals.component.sass']\n})\nexport class AdminReferralsComponent implements OnInit {\n\n\n  referralCodeForm = new FormGroup({\n    code: new FormControl()\n  });\n\n\n  constructor(private router: Router, private referralService: ReferralService) { }\n\n  ngOnInit(): void {\n    this.getReferrals(1);\n  }\n\n\n  loading = false;\n  displayedColumns: string[] = ['_id', 'code', 'dateCreated', 'lastUpdated', 'view', 'edit'];\n  data = [];\n  page: number = 1;\n  total: number;\n  selected = null;\n  public getReferrals(page: number) {\n    if (!isNaN(page)) {\n      this.loading = true;\n      this.referralService.getReferrals(page).subscribe(response => {\n        this.total = response.totalCount;\n        this.page = page;\n        this.loading = false;\n        this.data = response.referrals;\n      });\n    }\n  }\n\n  public updateRefCode() {\n    if (this.selected) {\n      this.referralService.updateReferral(this.selected, this.referralCodeForm.getRawValue()).subscribe(response => {\n        this.getReferrals(this.page);\n      })\n    } else {\n      this.referralService.addReferral(this.referralCodeForm.getRawValue()).subscribe(response => {\n        this.getReferrals(this.page);\n      })\n    }\n  }\n\n  public onAction($event) {\n    switch ($event.action) {\n      case 'edit':\n        this.selected = $event.element._id;\n        this.referralCodeForm.get('code').patchValue($event.element.code);\n        break;\n      case 'view':\n        this.router.navigate([`/admin/referrals/${$event.element._id}`]);\n        break;\n    }\n  }\n\n  public reset() {\n    this.referralCodeForm.get('code').patchValue('');\n    this.selected = null;\n  }\n}\n","<div class=\"container-fluid\">\n    <form [formGroup]=\"referralCodeForm\">\n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <h3>Referrals</h3>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>Referral Code</mat-label>\n                    <input matInput placeholder=\"Referral Code\" formControlName=\"code\" type=\"text\">\n                    <mat-hint>Referral Code <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12 text-left\">\n                <button class=\"mr-2\" mat-raised-button type=\"button\" (click)=\"reset()\" *ngIf=\"selected\">\n                    Cancel\n                </button>\n\n                <button mat-raised-button type=\"button\" (click)=\"updateRefCode()\">\n                    {{selected ? 'Update':'Add'}} Referral Code\n                </button>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div class=\"paginator\">\n                    <div class=\"spinner\" [ngClass]=\"{ 'hidden': !loading }\"></div>\n                    <pagination-controls (pageChange)=\"getReferrals($event)\" id=\"server\"></pagination-controls>\n                </div>\n            </div>\n        </div>\n    </form>\n\n\n    <app-generic-table [displayedColumns]=\"displayedColumns\" [data]=\"data\" (action)=\"onAction($event)\">\n    </app-generic-table>\n\n    <li *ngFor=\"let _ of data | paginate: { id: 'server', itemsPerPage: 10, currentPage: page, totalItems: total }\"\n        style=\"display: none;\">\n    </li>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminMainComponent } from './admin-main/admin-main.component';\nimport { StockComponent } from './stock/stock.component';\nimport { UsersComponent } from './users/users.component';\nimport { AdminOrdersComponent } from './admin-orders/admin-orders.component';\nimport { AdminUserComponent } from './admin-user/admin-user.component';\nimport { AdminReferralsComponent } from './admin-referrals/admin-referrals.component';\nimport { AdminReferralOrdersComponent } from './admin-referral-orders/admin-referral-orders.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminMainComponent,\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'orders'\n      }, \n      {\n        path: 'stock',\n        component: StockComponent\n      }, \n      {\n        path: 'orders',\n        component: AdminOrdersComponent\n      }, \n      // {\n      //   path: 'referrals',\n      //   component: AdminReferralsComponent\n      // },\n      {\n        path: 'referrals/:id',\n        component: AdminReferralOrdersComponent\n      },\n      {\n        path: 'users',\n        component: UsersComponent\n      },\n      {\n        path: 'users/:id',\n        component: AdminUserComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { OrderService } from 'src/app/shared/order.service';\nimport {\n  isEmptyOrNull,\n  isAdmin,\n  getCurrencySymbol,\n  isWorker\n} from 'src/app/shared/utils';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-admin-orders',\n  templateUrl: './admin-orders.component.html',\n  styleUrls: ['./admin-orders.component.sass'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      )\n    ])\n  ]\n})\nexport class AdminOrdersComponent implements OnInit {\n  getCurrencySymbol = getCurrencySymbol;\n  isEmptyOrNull = isEmptyOrNull;\n  columnsToDisplay = [\n    'orderId',\n    // 'uuid',\n    'tasks',\n    'user',\n    'ipAddress',\n    'paymentGateway',\n    'status',\n    // 'rsn',\n    'total',\n    // 'units',\n    // 'type',\n    'dates',\n    'delivered',\n    'view',\n    'edit'\n  ];\n  rates: { rs3: number; osrs: number };\n\n  expandedElement: any | null;\n  dataSource: MatTableDataSource<any> = new MatTableDataSource([]);\n  ordersForm = new FormGroup({\n    filterBy: new FormControl(null),\n    filter: new FormControl('')\n  });\n  constructor(private order: OrderService) {}\n\n  ngOnInit() {\n    this.getPage(1);\n    if (isAdmin() || isWorker()) {\n      this.columnsToDisplay.push('delete');\n    }\n\n    this.order.getRates().subscribe(response => {\n      this.rates = response.result;\n    });\n  }\n\n  public edit($event, orderId: string) {\n    this.order.updateOrder(orderId).subscribe(_ => {\n      this.getPage(1);\n    });\n  }\n\n  public delete($event, orderId: string) {\n    this.order.deleteOrder(orderId).subscribe(_ => {\n      this.getPage(1);\n    });\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  data = [];\n  p: number = 1;\n  total: number;\n  loading: boolean;\n\n  getPage(page: number) {\n    this.loading = true;\n    this.order.getOrders(page, this.filterCriteria).subscribe(response => {\n      this.total = response.totalCount;\n      this.p = page;\n      this.loading = false;\n\n      this.data = response.orders;\n      this.dataSource.data = response.orders;\n    });\n  }\n\n  public getRates() {\n    this.order.getRates().subscribe(response => {\n      this.rates = response.result;\n      console.log(response.result);\n    });\n  }\n\n  public setRate(curr, newRate) {\n    this.order.setRate(curr, newRate).subscribe(response => {\n      this.getRates();\n    });\n  }\n\n  public search(data: any) {\n    this.getPage(1);\n  }\n\n  public get filterCriteria(): string {\n    const filterBy = this.ordersForm.get('filterBy').value;\n    const filter = this.ordersForm.get('filter').value;\n    if (isEmptyOrNull(filterBy) || filterBy === 'null') {\n      return '';\n    }\n    return `&filterBy=${filterBy}&filter=${filter}`;\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"mb-5 text-center text-uppercase\">\n    <h2>Set Rates</h2>\n    <div class=\"d-flex flex-row justify-content-center flex-wrap\">\n      <div class=\"pr-3 pl-3\">\n        Current RS3 to OSRS rate: {{ rates.rs3 }}\n        <mat-form-field class=\"w-100\" apperance=\"outline\">\n          <input matInput #rs3 type=\"number\" placeholder=\"RS3 to OSRS rate\" />\n        </mat-form-field>\n\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"setRate('rs3', rs3.value)\"\n        >\n          Update RS3 to OSRS rate\n        </button>\n      </div>\n\n      <div class=\"pr-3 pl-3\">\n        Current OSRS to RS3 rate: {{ rates.osrs }}\n        <mat-form-field class=\"w-100\" apperance=\"outline\">\n          <input matInput #osrs type=\"number\" placeholder=\"OSRS to RS3 rate\" />\n        </mat-form-field>\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"setRate('osrs', osrs.value)\"\n        >\n          Update OSRS to RS3 rate\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <form [formGroup]=\"ordersForm\" (ngSubmit)=\"search(ordersForm.value)\">\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <mat-form-field class=\"w-100\" appearance=\"outline\">\n          <mat-label>Enter a search value</mat-label>\n          <input\n            matInput\n            placeholder=\"Enter a search value\"\n            formControlName=\"filter\"\n            type=\"text\"\n          />\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <mat-form-field class=\"w-100\" appearance=\"outline\">\n          <mat-label>Filter By</mat-label>\n          <mat-select formControlName=\"filterBy\">\n            <mat-option value=\"null\">None</mat-option>\n            <mat-option value=\"id\">Order Id</mat-option>\n            <mat-option value=\"uuid\">Order UUID</mat-option>\n            <mat-option value=\"email\">Email</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12 text-left\">\n        <button mat-raised-button type=\"submit\">Search</button>\n      </div>\n    </div>\n  </form>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"paginator\">\n        <div class=\"spinner\" [ngClass]=\"{ hidden: !loading }\"></div>\n        <pagination-controls\n          (pageChange)=\"getPage($event)\"\n          id=\"server\"\n        ></pagination-controls>\n      </div>\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        multiTemplateDataRows\n        class=\"mat-elevation-z8\"\n      >\n        <ng-container matColumnDef=\"orderId\">\n          <th mat-header-cell *matHeaderCellDef>Order #</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 300px; width: 300px\"\n          >\n            Id: {{ element.orderId }}<br />\n            UUID: {{ element.uuid }}\n          </td>\n        </ng-container>\n        <ng-container matColumnDef=\"tasks\">\n          <th mat-header-cell *matHeaderCellDef>Order Type</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 100px; width: 100px\"\n          >\n            <div [innerHTML]=\"element.orderType\"></div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"user\">\n          <th mat-header-cell *matHeaderCellDef>User</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 220px; width: 220px\"\n          >\n            {{ element.user ? element.user.email : 'N/A' }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"ipAddress\">\n          <th mat-header-cell *matHeaderCellDef>IP Address</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 150px; width: 150px\"\n          >\n            {{ element.ipAddress }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"paymentGateway\">\n          <th mat-header-cell *matHeaderCellDef>Payment Gateway</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 100px; width: 100px\"\n          >\n            {{ element.paymentGateway.name }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"status\">\n          <th mat-header-cell *matHeaderCellDef>Status</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 100px; width: 100px\"\n            [class.pending]=\"element.status === 'PENDING'\"\n            [class.expired]=\"\n              element.status === 'EXPIRED' || element.status === 'CANCELED'\n            \"\n            [class.open]=\"element.status === 'OPEN' || element.status === 'NEW'\"\n            [class.resolved]=\"\n              element.status === 'RESOLVED' || element.status === 'COMPLETED'\n            \"\n            [class.unresolved]=\"element.status === 'UNRESOLVED'\"\n          >\n            {{ element.status ? element.status : '-' }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"total\">\n          <th mat-header-cell *matHeaderCellDef>Invoice</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 150px; width: 150px\"\n          >\n            Subtotal {{ getCurrencySymbol(element.currency)\n            }}{{ element.invoice.subtotal }}<br />\n            Fee: {{ getCurrencySymbol(element.currency)\n            }}{{ element.invoice.fee }}<br />\n            Total: {{ getCurrencySymbol(element.currency)\n            }}{{ element.invoice.total }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"delivered\">\n          <th mat-header-cell *matHeaderCellDef>Delivered</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 100px; width: 100px\"\n          >\n            {{ element.delivered ? 'Yes' : 'No' }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"dates\">\n          <th mat-header-cell *matHeaderCellDef>Dates</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 125px; width: 125px\"\n          >\n            Last Updated: {{ element.lastUpdated | date: 'short' }}<br />\n            Date Created: {{ element.dateCreated | date: 'short' }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"view\">\n          <th mat-header-cell *matHeaderCellDef>View</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 50px; width: 50px\"\n          >\n            <i\n              class=\"material-icons\"\n              (click)=\"\n                expandedElement = expandedElement === element ? null : element\n              \"\n            >\n              visibility\n            </i>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"edit\">\n          <th mat-header-cell *matHeaderCellDef>Edit</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 50px; width: 50px\"\n          >\n            <i class=\"material-icons\" (click)=\"edit($event, element.orderId)\">\n              edit\n            </i>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"delete\">\n          <th mat-header-cell *matHeaderCellDef>Delete</th>\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            style=\"max-width: 50px; width: 50px\"\n          >\n            <i class=\"material-icons\" (click)=\"delete($event, element.orderId)\">\n              delete\n            </i>\n          </td>\n        </ng-container>\n\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            [attr.colspan]=\"columnsToDisplay.length\"\n          >\n            <div\n              class=\"example-element-detail\"\n              [@detailExpand]=\"\n                element == expandedElement ? 'expanded' : 'collapsed'\n              \"\n            >\n              <hr />\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  Payment Gateway: {{ element.paymentGateway.name }}\n                </div>\n              </div>\n              <div class=\"row\" *ngIf=\"element.payment.coinbase\">\n                <div class=\"col-12 mb-2\">\n                  Charge ID:\n                  {{\n                    element.payment.coinbase.identifier\n                      ? element.payment.coinbase.identifier\n                      : 'N/A'\n                  }}<br />\n                  Context:\n                  {{\n                    element.payment.coinbase.context\n                      ? element.payment.coinbase.context\n                      : 'N/A'\n                  }}<br />\n                  Code:\n                  {{\n                    element.payment.coinbase.code\n                      ? element.payment.coinbase.code\n                      : 'N/A'\n                  }}<br />\n                  URL: Click\n                  <a\n                    [href]=\"\n                      'https://commerce.coinbase.com/charges/' +\n                      element.payment.coinbase.code\n                    \"\n                    target=\"_blank\"\n                    >here</a\n                  >\n                </div>\n              </div>\n              <hr *ngIf=\"element.gold\" />\n              <div class=\"row mb-2\" *ngIf=\"element.gold\">\n                <div class=\"col-12 mb-2\">\n                  <div>Gold Order</div>\n                  <div>\n                    RSN: {{ element.gold.rsn }}<br />\n                    Units: {{ element.gold.units }}M<br />\n                    Server:\n                    {{ element.gold.server === 1 ? 'OldSchool' : 'Runescape3'\n                    }}<br />\n                  </div>\n                </div>\n              </div>\n              <hr *ngIf=\"!isEmptyOrNull(element.accounts)\" />\n              <div\n                class=\"row mb-2\"\n                *ngFor=\"let account of element.accounts; let i = index\"\n              >\n                <div class=\"col-12 mb-2\">\n                  <div>Account #{{ i + 1 }}</div>\n                  <div class=\"mb-2\">\n                    Account Id: {{ account._id }}<br />\n                    Account title: {{ account.title }}<br />\n                    Account price: ${{ account.price }}\n                  </div>\n                </div>\n              </div>\n              <hr *ngIf=\"!isEmptyOrNull(element.powerleveling)\" />\n              <div\n                class=\"row mb-2\"\n                *ngFor=\"let p of element.powerleveling; let i = index\"\n              >\n                <div class=\"col-12 mb-2\">\n                  <div>Powerleveling service #{{ i + 1 }}</div>\n                  <div class=\"mb-2\">\n                    Powerleveling Id: {{ p._id }}<br />\n                    Powerleveling title: {{ p.skill.title }}<br />\n                    Powerleveling price: ${{ p.price }}<br />\n                    Powerleveling description: {{ p.from }} -> {{ p.to }} ({{\n                      p.xp | number\n                    }}\n                    XP)\n                  </div>\n                </div>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let element; columns: columnsToDisplay\"\n          class=\"example-element-row\"\n          [class.example-expanded-row]=\"expandedElement === element\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: ['expandedDetail']\"\n          class=\"example-detail-row\"\n        ></tr>\n      </table>\n    </div>\n  </div>\n</div>\n\n<li\n  *ngFor=\"\n    let order of data\n      | paginate\n        : { id: 'server', itemsPerPage: 10, currentPage: p, totalItems: total }\n  \"\n  style=\"display: none\"\n></li>\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/shared/user.service';\nimport { BasePageComponent } from 'src/app/core/base-page.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { isEmptyOrNull } from 'src/app/shared/utils';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.sass']\n})\nexport class UsersComponent extends BasePageComponent implements OnInit {\n  displayedColumns: string[] = ['userId', 'groupName', 'email', 'refBy', 'dateCreated', 'lastUpdated', 'update'];\n  data = [];\n\n  p: number = 1;\n  total: number;\n  loading: boolean;\n  usersForm = new FormGroup({\n    filterBy: new FormControl(null),\n    filter: new FormControl(''),\n  })\n  constructor(private user: UserService, private router: Router) {\n    super();\n  }\n\n  ngOnInit() {\n    this.getPage(1);\n  }\n\n\n  getPage(page: number) {\n    if (!isNaN(page)) {\n      this.loading = true;\n      this.user.getAllUsers(page, this.filterCriteria).pipe(takeUntil(this.componentDestroyed$)).subscribe(response => {\n        this.total = response.totalCount;\n        this.p = page;\n        this.loading = false;\n        this.data = response.users;\n      });\n    }\n  }\n\n  public onAction($event) {\n    switch ($event.action) {\n      case 'update':\n        this.router.navigate([`/admin/users/${$event.element.userId}`])\n        break;\n    }\n  }\n\n  public search(data: any) {\n    this.getPage(1);\n  }\n\n  public get filterCriteria(): string {\n    const filterBy = this.usersForm.get('filterBy').value;\n    const filter = this.usersForm.get('filter').value;\n    if (isEmptyOrNull(filterBy) || filterBy === 'null') {\n      return '';\n    }\n    return `&filterBy=${filterBy}&filter=${filter}`\n  }\n}\n","<div class=\"container-fluid\">\n    <form [formGroup]=\"usersForm\" (ngSubmit)=\"search(usersForm.value)\">\n        <div class=\"row\">\n            <div class=\"col-3\">\n                <mat-form-field class=\"w-100\" appearance=\"outline\">\n                    <mat-label>Enter a search value</mat-label>\n                    <input matInput placeholder=\"Enter a search value\" formControlName=\"filter\" type=\"text\">\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-3\">\n                <mat-form-field class=\"w-100\" appearance=\"outline\">\n                    <mat-label>Filter By</mat-label>\n                    <mat-select formControlName=\"filterBy\">\n                        <mat-option value=\"null\">None</mat-option>\n                        <mat-option value=\"rsn\">RSN</mat-option>\n                        <mat-option value=\"email\">Email</mat-option>\n                        <mat-option value=\"ip\">IP Address</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12 text-left\">\n                <button mat-raised-button type=\"submit\">Search</button>\n            </div>\n        </div>\n    </form>\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"paginator\">\n                <div class=\"spinner\" [ngClass]=\"{ 'hidden': !loading }\"></div>\n                <pagination-controls (pageChange)=\"getPage($event)\" id=\"server\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n</div>\n\n<app-generic-table [displayedColumns]=\"displayedColumns\" [data]=\"data\" (action)=\"onAction($event)\">\n</app-generic-table>\n\n\n<li *ngFor=\"let order of data | paginate: { id: 'server', itemsPerPage: 10, currentPage: p, totalItems: total }\"\n    style=\"display: none;\">\n</li>","import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport { WatcherService } from 'src/app/shared/watcher.service';\nimport { isAdmin, isLoggedIn, isWorker } from 'src/app/shared/utils';\nimport { BasePageService } from 'src/app/shared/base-page.service';\n\n@Component({\n  selector: 'app-admin-main',\n  templateUrl: './admin-main.component.html',\n  styleUrls: ['./admin-main.component.sass']\n})\nexport class AdminMainComponent implements OnInit, OnDestroy {\n  // tslint:disable-next-line:variable-name\n  private _mobileQueryListener: () => void;\n  mobileQuery: MediaQueryList;\n  isLoggedIn = false;\n  isAdmin = isAdmin();\n  isWorker = isWorker();\n  isMobile = false;\n  navLinks = [];\n\n  constructor(public watcher: WatcherService, changeDetectorRef: ChangeDetectorRef, media: MediaMatcher, private basePageService: BasePageService) {\n    this.mobileQuery = media.matchMedia('(max-width: 600px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n    this.basePageService.updateTitleDescription('Admin Control Panel', 'Admin Control Panel | Fast Delivery | Fairly Priced Rates | 100% Secured');\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n\n  ngOnInit() {\n    this.isLoggedIn = isLoggedIn();\n    this.watcher.get().subscribe(result => {\n      if (result.isMobile !== undefined) {\n        this.isMobile = result.isMobile;\n      }\n\n      if (result.jwt !== undefined) {\n        this.isLoggedIn = isLoggedIn();\n        this.isAdmin = isAdmin();\n        this.isWorker = isWorker();\n      }\n    });\n\n    this.navLinks = [\n      {\n        text: `Home`,\n        link: '/'\n      },\n      {\n        text: 'Orders',\n        link: '/admin/orders'\n      },\n      {\n        text: 'Stock',\n        link: '/admin/stock'\n      },\n     \n      {\n        text: 'Users',\n        link: '/admin/users'\n      }, \n    ]\n\n  }\n}\n","<div class=\"example-container\" [class.example-is-mobile]=\"mobileQuery.matches\">\n    <mat-toolbar class=\"example-toolbar\">\n        <button mat-icon-button (click)=\"snav.toggle()\">\n            <mat-icon>menu</mat-icon>\n        </button>\n        <h1 class=\"example-app-name\">RSGoldBar - Admin Panel</h1>\n    </mat-toolbar>\n\n    <mat-sidenav-container class=\"example-sidenav-container\" [style.marginTop.px]=\"mobileQuery.matches ? 56 : 0\">\n        <mat-sidenav #snav [mode]=\"mobileQuery.matches ? 'over' : 'side'\" [fixedInViewport]=\"mobileQuery.matches\"\n            fixedTopGap=\"56\">\n            <mat-nav-list>\n                <a mat-list-item [routerLink]=\"nav.link\" *ngFor=\"let nav of navLinks\">{{nav.text}}</a>\n                <a mat-list-item routerLink=\"\" (click)=\"watcher.logout()\" *ngIf=\"isLoggedIn\">Logout</a>\n            </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-sidenav-content>\n            <router-outlet></router-outlet>\n        </mat-sidenav-content>\n    </mat-sidenav-container>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  NgForm,\n  FormGroup,\n  Validators,\n  FormArray\n} from '@angular/forms';\nimport { PaymentGatewayService } from 'src/app/shared/payment-gateway.service';\nimport { StockService } from 'src/app/shared/stock.service';\nimport { MyErrorStateMatcher } from 'src/app/shared/utils';\n\n@Component({\n  selector: 'app-stock',\n  templateUrl: './stock.component.html',\n  styleUrls: ['./stock.component.sass']\n})\nexport class StockComponent implements OnInit {\n  lastUpdated;\n  matcher = new MyErrorStateMatcher();\n  result = [];\n  stockForm = new FormGroup({\n    rs3PriceSelling: new FormControl(0, Validators.required),\n    rs3PriceBuying: new FormControl(0, Validators.required),\n    rs3Units: new FormControl(0, Validators.required),\n    osrsPriceSelling: new FormControl(0, Validators.required),\n    osrsPriceBuying: new FormControl(0, Validators.required),\n    osrsUnits: new FormControl(0, Validators.required)\n  });\n\n  pgsArray = new FormArray([]);\n  paymentGatewaysForm = new FormGroup({\n    pgs: this.pgsArray\n  });\n\n  constructor(\n    private stock: StockService,\n    private paymentgatewayService: PaymentGatewayService\n  ) {}\n\n  ngOnInit() {\n    this.fetchDataStock();\n    this.fetchPaymentGateways();\n  }\n\n  public fetchDataStock() {\n    this.stock.getStock().subscribe(stocks => {\n      this.stockForm.get('rs3PriceSelling').setValue(stocks.rs3.selling);\n      this.stockForm.get('rs3PriceBuying').setValue(stocks.rs3.buying);\n      this.stockForm.get('rs3Units').setValue(stocks.rs3.units);\n\n      this.stockForm.get('osrsPriceSelling').setValue(stocks.osrs.selling);\n      this.stockForm.get('osrsPriceBuying').setValue(stocks.osrs.buying);\n      this.stockForm.get('osrsUnits').setValue(stocks.osrs.units);\n    });\n  }\n\n  public fetchPaymentGateways() {\n    while (this.pgsArray.length > 0) {\n      this.pgsArray.removeAt(0);\n    }\n    this.paymentgatewayService.getPaymentGateways().subscribe(response => {\n      response.forEach(element => {\n        const formGroup = new FormGroup({\n          fees: new FormControl(element.fees),\n          limit: new FormControl(element.limit),\n          name: new FormControl({ value: element.name, disabled: true }),\n          paymentGatewayId: new FormControl({\n            value: element.paymentGatewayId,\n            disabled: true\n          })\n        });\n        this.pgsArray.push(formGroup);\n      });\n    });\n  }\n\n  public getPgs(): any {\n    return this.paymentGatewaysForm.controls['pgs'] as any;\n  }\n\n  public updateStocks() {\n    this.stock.updateStock(this.stockForm.getRawValue()).subscribe(result => {\n      this.fetchDataStock();\n    });\n  }\n\n  public updatePgs() {\n    this.paymentgatewayService\n      .updatePaymentGateways(this.paymentGatewaysForm.getRawValue())\n      .subscribe(result => {\n        this.fetchPaymentGateways();\n      });\n  }\n}\n","<div class=\"container-fluid\">\n    <form [formGroup]=\"stockForm\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h4>Stock Units & Prices</h4>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>OSRS Units in stock</mat-label>\n                    <input matInput placeholder=\"OSRS Units in stock\" formControlName=\"osrsUnits\" type=\"number\">\n                    <mat-hint>OSRS Units in stock <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>OSRS Price per unit (WE ARE SELLING FOR)\n                    </mat-label>\n                    <input matInput placeholder=\"OSRS Price per unit\" formControlName=\"osrsPriceSelling\" type=\"number\">\n                    <mat-hint>OSRS Price per unit <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>OSRS Price per unit (WE ARE BUYING FOR)\n                    </mat-label>\n                    <input matInput placeholder=\"OSRS Price per unit\" formControlName=\"osrsPriceBuying\" type=\"number\">\n                    <mat-hint>OSRS Price per unit <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>RS3 Units in stock</mat-label>\n                    <input matInput placeholder=\"Runescape 3 Units in stock\" formControlName=\"rs3Units\" type=\"number\">\n                    <mat-hint>Runescape 3 Units in stock <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>RS3 Price per unit (WE ARE SELLING FOR)\n                    </mat-label>\n                    <input matInput placeholder=\"Price per unit\" formControlName=\"rs3PriceSelling\" type=\"number\">\n                    <mat-hint>Runescape 3 Price per unit <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n            <div class=\"col-3\">\n                <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                    <mat-label>RS3 Price per unit (WE ARE BUYING FOR)\n                    </mat-label>\n                    <input matInput placeholder=\"RS3 Price per unit\" formControlName=\"rs3PriceBuying\" type=\"number\">\n                    <mat-hint>RS3 Price per unit <strong>required</strong></mat-hint>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12 text-left\">\n                <button mat-raised-button type=\"button\" (click)=\"updateStocks()\">\n                    Update Stock Units & Prices\n                </button>\n            </div>\n        </div>\n    </form>\n    <hr>\n    <div class=\"row mt-4\">\n        <div class=\"col-12\">\n            <h4>Payment Gateway fees & limits</h4>\n        </div>\n    </div>\n\n\n    <form [formGroup]=\"paymentGatewaysForm\">\n        <ng-container formArrayName=\"pgs\">\n            <ng-container *ngFor=\"let f of getPgs().controls; index as i\">\n                <ng-container [formGroupName]=\"i\">\n\n                    <div class=\"row\">\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Payment Gateway Name</mat-label>\n                                <input matInput placeholder=\"Payment Gateway Name\" formControlName=\"name\">\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Payment Gateway Id</mat-label>\n                                <input matInput placeholder=\"Payment Gateway Id\" formControlName=\"paymentGatewayId\">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Fees</mat-label>\n                                <input matInput placeholder=\"Fees\" formControlName=\"fees\" type=\"number\">\n                                <mat-hint>Fees <strong>required</strong></mat-hint>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-3\">\n                            <mat-form-field appearance=\"outline\" class=\"stock-field\">\n                                <mat-label>Limit</mat-label>\n                                <input matInput placeholder=\"limit\" formControlName=\"limit\" type=\"number\">\n                                <mat-hint>Limit <strong>required</strong></mat-hint>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </ng-container>\n                <hr>\n            </ng-container>\n            <div class=\"row\">\n                <div class=\"col-12 text-left\">\n                    <button mat-raised-button type=\"button\" (click)=\"updatePgs()\">\n                        Update Payment Gateways\n                    </button>\n                </div>\n            </div>\n        </ng-container>\n    </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BasePageComponent } from \"src/app/core/base-page.component\";\nimport { ReferralService } from \"src/app/shared/referral.service\";\n\n@Component({\n  selector: 'app-admin-referral-orders',\n  templateUrl: './admin-referral-orders.component.html',\n  styleUrls: ['./admin-referral-orders.component.sass']\n})\nexport class AdminReferralOrdersComponent extends BasePageComponent implements OnInit {\n  id = this.route.snapshot.params.id;\n  statistics = null;\n  constructor(private route: ActivatedRoute, private referralService: ReferralService) {\n    super();\n  }\n\n  ngOnInit() {\n    this.referralService.getStatistics(this.id).subscribe(response => {\n      this.statistics = response;\n    });\n  }\n}\n","<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-12 text-center form-title\">\n            Referral Orders History\n        </div>\n    </div>\n    <div class=\"row\" *ngIf=\"statistics\">\n        <div class=\"col-12 text-center form-description\">\n            Orders: {{statistics.count}} - Total value: ${{statistics.total}}\n        </div>\n    </div>\n    <app-common-orders [referralHistory]=\"true\" [referralId]=\"id\" [selfUser]=\"false\">\n    </app-common-orders>\n</div>"]}