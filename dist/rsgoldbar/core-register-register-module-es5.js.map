{"version":3,"sources":["webpack:///src/app/core/register/register.module.ts","webpack:///src/app/core/register/register/register.component.ts","webpack:///src/app/core/register/register/register.component.html","webpack:///src/app/core/register/register-routing.module.ts"],"names":["RegisterModule","declarations","imports","RegisterComponent","basePageService","user","router","matcher","registerForm","email","required","password","confirm_password","checkPasswords","group","pass","get","value","confirmPass","notSame","data","refCode","localStorage","getItem","addUser","pipe","componentDestroyed$","subscribe","response","navigate","register","selector","templateUrl","styleUrls","routes","path","component","RegisterRoutingModule","forChild","exports"],"mappings":"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","file":"core-register-register-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport { RegisterComponent } from './register/register.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    SharedModule\n  ]\n})\nexport class RegisterModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MyErrorStateMatcher } from 'src/app/shared/utils';\nimport { BasePageComponent } from '../../base-page.component';\nimport { UserService } from 'src/app/shared/user.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { BasePageService } from 'src/app/shared/base-page.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.sass']\n})\nexport class RegisterComponent extends BasePageComponent implements OnInit {\n  matcher = new MyErrorStateMatcher();\n  registerForm = new FormGroup({\n    email: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n    confirm_password: new FormControl('', Validators.required)\n  }, this.checkPasswords);\n  constructor(private basePageService: BasePageService, private user: UserService, private router: Router) {\n    super();\n  }\n\n  ngOnInit() {\n    // this.basePageService.updateTitleDescription('Register', `New to ${environment.title}? Register an account now!`);\n  }\n\n  private checkPasswords(group: FormGroup) {\n    const pass = group.get('password').value;\n    const confirmPass = group.get('confirm_password').value;\n\n    return pass === confirmPass ? null : { notSame: true };\n  }\n\n  public register(data: any) {\n    data.refCode = localStorage.getItem('ref');\n    this.user.addUser(data).pipe(takeUntil(this.componentDestroyed$)).subscribe(response => {\n      this.router.navigate([`/login`]);\n    });\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}","<div class=\"selling-page\">\n    <div class=\"main-container\">\n        <div class=\"container-fluid material-ui\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <form class=\"common-form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register(registerForm.value)\">\n                        <div class=\"form-title text-center\">Register</div>\n                        <mat-form-field appearance=\"outline\">\n                            <input matInput placeholder=\"Email\" formControlName=\"email\" [errorStateMatcher]=\"matcher\"\n                                type=\"text\">\n                            <mat-hint>Email is <strong>required</strong></mat-hint>\n\n                            <mat-error *ngIf=\"registerForm.controls['email'].hasError('required')\">\n                                Email is <strong>required</strong>\n                            </mat-error>\n                        </mat-form-field>\n\n                        <mat-form-field appearance=\"outline\">\n                            <input matInput placeholder=\"Password\" formControlName=\"password\"\n                                [errorStateMatcher]=\"matcher\" type=\"password\">\n                            <mat-hint>Password is <strong>required</strong></mat-hint>\n\n                            <mat-error *ngIf=\"registerForm.controls['password'].hasError('required')\">\n                                Password is <strong>required</strong>\n                            </mat-error>\n                        </mat-form-field>\n\n                        <mat-form-field appearance=\"outline\">\n                            <input matInput placeholder=\"Confirm password\" formControlName=\"confirm_password\"\n                                [errorStateMatcher]=\"matcher\" type=\"password\">\n                            <mat-hint>Confirm password is <strong>required</strong></mat-hint>\n\n                            <mat-error *ngIf=\"registerForm.controls['confirm_password'].hasError('required')\">\n                                Confirm password is <strong>required</strong>\n                            </mat-error>\n                        </mat-form-field>\n\n                        <button mat-raised-button type=\"submit\" [disabled]=\"!registerForm.valid\">\n                            Register\n                        </button>\n                        <div class=\"pt-2\">\n                            <mat-hint>Already a member? <a [routerLink]=\"['/login']\">Login to your account</a>\n                            </mat-hint>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterComponent } from './register/register.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n"]}